<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd">

    <!-- 扫描定时任务的包 -->
    <context:component-scan base-package="com.ssm.scheduler" />
    <!-- 开启任务注解配置 -->
    <task:annotation-driven />

    <!-- 任务调度的bean class的路径 -->
    <bean id="testJob" class="com.ssm.scheduler.TestJob"></bean>

    <!--
        如果定时任务很多，可以配置executor线程池，
        这里executor的含义和java.util.concurrent.Executor是一样的，
        pool-size的大小官方推荐为5~10。scheduler的pool-size是ScheduledExecutorService线程池
    -->
    <!-- 不配置以下代码 在运行是会报错错误 但是不影响使用
        java.util.concurrent.ScheduledExecutorService] is defined-->
    <!--  原因是 ScheduledAnnotationBeanPostProcessor在 setTaskScheduler时，
        没有找到默认taskScheduler，继续执行 setScheduler -->
    <task:scheduler id="scheduler" pool-size="5" />
    <task:executor id="executor" pool-size="5"></task:executor>
    <task:annotation-driven executor="executor" scheduler="scheduler" />


    <!-- 以下是 xml配置任务调度方式 -->

    <!-- 任务的具体配置 class及方法... -->
    <!--<bean id="testJobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
        <!--<property name="targetObject" ref="testJob"></property>-->
        <!--<property name="targetMethod" value="printSomething"></property>-->
        <!--&lt;!&ndash; 是否并行 如果是fasle 前一个任务没有完成，后一个任务的触发时间到了，一直不会不会执行 知道前任务执行完毕 &ndash;&gt;-->
        <!--<property name="concurrent" value="false"></property>-->
    <!--</bean>-->

    <!-- 配置调度执行的触发时间 -->
    <!--<bean id="testJobTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
        <!--<property name="jobDetail" ref="testJobDetail"></property>-->
        <!--<property name="cronExpression">-->
            <!--&lt;!&ndash; 每分钟执行一次 从0分钟开始执行第一次 &ndash;&gt;-->
            <!--<value> 0 3 15 * * ? </value>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- quarzt的调度工厂，调度工厂只能有一个，多个调度任务在list中添加 -->
    <!--<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
        <!--<property name="triggers">-->
            <!--<list>-->
                <!--<ref bean="testJobTrigger"></ref>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

</beans>